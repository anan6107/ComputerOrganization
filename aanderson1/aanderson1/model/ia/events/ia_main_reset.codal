/**
 * Codasip Ltd
 *
 * CONFIDENTIAL
 *
 * Copyright 2016 Codasip Ltd
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of Codasip Ltd
 * and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip Ltd and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 */

/* -------------------------------------------------------------------------------------------------
 *
 *                          Codasip uRISC IA - main and reset events
 *
 * -------------------------------------------------------------------------------------------------
 */

#include "config.hcodal"
#include "debug.hcodal"

// -------------------------------------------------------------------------------------------------
// Event main, which starts execution of the next instruction, is activated every clock cycle.

event main
{
    // The directive 'use' defines instances of other events and elements.
    use isa;

    // Local instruction register
    register bit[INSTR_W] r_instruction_buffer;

    semantics
    {
        // Read an instruction from memory
        r_instruction_buffer = if_fetch[r_pc];

        // Print fetched instruction
        codasip_print(INFO_GENERAL, "\n-----------------------------\n");
        codasip_disassembler(INFO_GENERAL, r_instruction_buffer, r_pc);
        codasip_print(INFO_GENERAL, "\n-----------------------------\n");

        // Increment the program counter
        r_pc += INSTR_SIZE;

        // The isa is a set of instructions and its argument is a register
        // or memory cell that contains the instruction to be executed.
        isa(r_instruction_buffer);
    };
};

// -------------------------------------------------------------------------------------------------
// The reset event is a special operation that is used to set the initial processor state.
// This event is activated at the beginning of a simulation.

event reset
{
    semantics
    {
        codasip_info(INFO_GENERAL, "Reseting...");
    };
};
