/**
 * Codasip Ltd
 *
 * CONFIDENTIAL
 *
 * Copyright 2016 Codasip Ltd
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of Codasip Ltd
 * and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip Ltd and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 */

/* -------------------------------------------------------------------------------------------------
 *
 *                            Codasip uRISC - architectural resources
 *
 * -------------------------------------------------------------------------------------------------
 */

#include "config.hcodal"

// -------------------------------------------------------------------------------------------------
// Program counter
// -------------------------------------------------------------------------------------------------

pc register bit[ADDR_W] r_pc
{
    default = BOOT_START;
};

// -------------------------------------------------------------------------------------------------
// Register File
// -------------------------------------------------------------------------------------------------

arch register_file bit[WORD_W] rf_gpr
{
    dataports = { RF_GPR_RP, RF_GPR_WP };
    size = RF_GPR_SIZE;
    reset = true;
    default = 0;
};

// -------------------------------------------------------------------------------------------------
// Address space
// -------------------------------------------------------------------------------------------------

address_space as_all
{
    bits = { ADDR_W, WORD_W, LAU_W };
    interfaces = {
        PROGRAM : if_fetch,
        DATA : if_ldst
    };
    type = ALL;
    endianness = ENDIAN;
};

// -------------------------------------------------------------------------------------------------
// Schedule classes
// -------------------------------------------------------------------------------------------------

schedule_class sc_load
{
    latency = 2;
};
