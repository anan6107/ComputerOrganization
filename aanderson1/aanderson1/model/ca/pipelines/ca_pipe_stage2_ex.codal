/**
 * Codasip Ltd
 *
 * CONFIDENTIAL
 *
 * Copyright 2016 Codasip Ltd
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of Codasip Ltd
 * and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip Ltd and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 */

/* -------------------------------------------------------------------------------------------------
 *
 *                         Codasip uRISC CA - execute stage events
 *
 * -------------------------------------------------------------------------------------------------
 */

#include "ca_defines.hcodal"
#include "opcodes.hcodal"
#include "config.hcodal"
#include "debug.hcodal"

// -------------------------------------------------------------------------------------------------
// Execute Stage
// -------------------------------------------------------------------------------------------------

event ex : pipeline(pipe.EX)
{
    use ex_memory;
    use ex_output;

    semantics
    {
        s_ex_add = r_ex_srcA + r_ex_srcB;

        // -----------------------------------------------------------------------------------------
        // ALU
        // -----------------------------------------------------------------------------------------

        switch (r_ex_alu_op)
        {
            // Nop
            case ALU_NOP:
                s_ex_alu = 0;
                break;

            // Move instructions
            case ALU_MOV:
                s_ex_alu = r_ex_srcB;
                break;

            case ALU_MOVHI:
                s_ex_alu = r_ex_srcB[15..0] :: r_ex_srcA[15..0];
                break;

            // Arithmetic instructions
            case ALU_ADD:
                s_ex_alu = s_ex_add;
                break;

            case ALU_SUB:
                s_ex_alu = r_ex_srcA - r_ex_srcB;
                break;

            case ALU_MUL:
                s_ex_alu = r_ex_srcA * r_ex_srcB;
                break;

            // Logical instructions
            case ALU_NEG:
                s_ex_alu = ~r_ex_srcB;
                break;

            case ALU_AND:
                s_ex_alu = r_ex_srcA & r_ex_srcB;
                break;

            case ALU_OR:
                s_ex_alu = r_ex_srcA | r_ex_srcB;
                break;

            case ALU_XOR:
                s_ex_alu = r_ex_srcA ^ r_ex_srcB;
                break;

            // Shift instructions
            case ALU_SLL:
                s_ex_alu = r_ex_srcA << (uint5)r_ex_srcB;
                break;

            case ALU_SRL:
                s_ex_alu = r_ex_srcA >> (uint5)r_ex_srcB;
                break;

            case ALU_SRA:
                s_ex_alu = (int32)r_ex_srcA >> (uint5)r_ex_srcB;
                break;

            // Compare instructions
            case ALU_EQ:
                s_ex_alu = r_ex_srcA == r_ex_srcB;
                break;

            case ALU_NEQ:
                s_ex_alu = r_ex_srcA != r_ex_srcB;
                break;

            case ALU_ULT:
                s_ex_alu = r_ex_srcA < r_ex_srcB;
                break;

            case ALU_ULE:
                s_ex_alu = r_ex_srcA <= r_ex_srcB;
                break;

            case ALU_SLT:
                s_ex_alu = (int32)r_ex_srcA < (int32)r_ex_srcB;
                break;

            case ALU_SLE:
                s_ex_alu = (int32)r_ex_srcA <= (int32)r_ex_srcB;
                break;

            default:
                s_ex_alu = 0;
                codasip_fatal(FATAL_DEFAULT, "Default case: %d\n", r_ex_alu_op);
                break;
        }

        // End of program execution
        if (r_ex_opcode == OPC_HALT)
        {
            codasip_halt();
            codasip_info(INFO_GENERAL, "Halt: return value = %d\n", rf_gpr[GPR_RETVAL] & 0xFF);
            codasip_store_exit_code(rf_gpr[GPR_RETVAL] & 0xFF);
        }

        // Timing
        ex_memory();
        ex_output();
    };
};

event ex_memory : pipeline(pipe.EX)
{
    semantics
    {
        uint32 base_address;
        uint2  base_offset;
        uint3  byte_count;
        uint3  request_cmd;
        uint2  status;
        uint3  response;

        // -----------------------------------------------------------------------------------------
        // Memory request parameters
        // -----------------------------------------------------------------------------------------

        // Memory interface supports aligned access
        base_address = s_ex_add & BUS_MASK;
        base_offset = s_ex_add & ~BUS_MASK;

        switch (r_ex_mem_op)
        {
            case MEM_NOP:
                request_cmd = CP_CMD_NONE;
                byte_count = 0;
                break;

            case MEM_LD:
                request_cmd = CP_CMD_READ;
                byte_count = 4;
                break;

            case MEM_LDHS:
            case MEM_LDHU:
                request_cmd = CP_CMD_READ;
                byte_count = 2;
                break;

            case MEM_LDBS:
            case MEM_LDBU:
                request_cmd = CP_CMD_READ;
                byte_count = 1;
                break;

            case MEM_ST:
                request_cmd = CP_CMD_WRITE;
                byte_count = 4;
                break;

            case MEM_STH:
                request_cmd = CP_CMD_WRITE;
                byte_count = 2;
                break;

            case MEM_STB:
                request_cmd = CP_CMD_WRITE;
                byte_count = 1;
                break;

            default:
                request_cmd = CP_CMD_NONE;
                byte_count = 0;
                codasip_fatal(FATAL_DEFAULT, "Default case: %d\n", r_ex_mem_op);
                break;
        }

        // -----------------------------------------------------------------------------------------
        // Memory request
        // -----------------------------------------------------------------------------------------

        // Load
        if (request_cmd == CP_CMD_READ)
        {
            if_ldst.transport(CP_PHS_ADDRESS, status, CP_CMD_READ, base_address, base_offset, byte_count);
        }

        // Store
        else if (request_cmd == CP_CMD_WRITE)
        {
            if_ldst.transport(CP_PHS_ADDRESS, status, CP_CMD_WRITE, base_address, base_offset, byte_count);
            if_ldst.transport(CP_PHS_DATA_WRITE, response, r_ex_store);
        }

        s_ex_stall = s_wb_stall;
    };
};

event ex_output : pipeline(pipe.EX)
{
    semantics
    {
        r_wb_pc = r_ex_pc;
        r_wb_opcode = r_ex_opcode;

        r_wb_alu = s_ex_alu;
        r_wb_mem_op = r_ex_mem_op;

        // Register file write enable
        s_ex_dest_we = (r_ex_dest_we == WE_TRUE ||
                       (r_ex_dest_we == WE_TRUE_COND  && r_ex_cond == true) ||
                       (r_ex_dest_we == WE_FALSE_COND && r_ex_cond == false));

        // Program counter write enable
        s_ex_jump_en = (r_ex_jump_op == JUMP_TRUE ||
                       (r_ex_jump_op == JUMP_TRUE_COND  && r_ex_cond == true) ||
                       (r_ex_jump_op == JUMP_FALSE_COND && r_ex_cond == false));

        r_wb_dest_we = s_ex_dest_we;
        r_wb_pipe_mux = r_ex_pipe_mux;
        r_wb_addrW = r_ex_addrW;

        r_wb_instr = r_ex_instr;
    };
};

