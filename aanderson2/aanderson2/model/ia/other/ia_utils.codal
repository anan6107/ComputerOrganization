#include "opcodes.hcodal"
#include "config.hcodal"
#include "debug.hcodal"

// ---------------------------------------------------------------------------------------------- //
// General Purpose Register File Access
// ---------------------------------------------------------------------------------------------- //
inline uint32 rf_gpr_read(const uint5 index)
{
// The register field is accessed in the same way as a C array.
    return rf_gpr[index];
}
inline void rf_gpr_write(const uint32 val, const uint5 index)
{
    rf_gpr[index] = val;
    codasip_info(INFO_RF_WRITE, "rf_gpr[%d] = 0x%x", index, val);
}
// ---------------------------------------------------------------------------------------------- //
// ALU
// ---------------------------------------------------------------------------------------------- //
uint32 alu(const uint32 opc, const uint32 src1, const uint32 src2)
{
    uint32 result;
    switch (opc)
    {
        case OPC_ADD:
        case OPC_ADDI:
            result = src1 + src2;
            break;
        case OPC_SUB:
            result = src1 - src2;
            break;
        case OPC_MUL:
            result = src1 * src2;
            break;
        case OPC_AND:
            result = src1 & src2;
            break;
        case OPC_OR:
            result = src1 | src2;
            break;
        case OPC_XOR:
            result = src1 ^ src2;
            break;
        case OPC_SLL:
            result = src1 << (uint5) src2;
            break;
        case OPC_SRA:
            result = (int32) src1 >> (uint5) src2;
            break;
        case OPC_SRL:
            result = src1 >> (uint5) src2;
            break;
        default:
            result = 0;
            codasip_fatal(FATAL_DEFAULT, "Default case: %d\n", opc);
            break;
    }
    return result;
}
// ---------------------------------------------------------------------------------------------- //
// Load function
// ---------------------------------------------------------------------------------------------- //
uint32 load(const uint32 opc, const uint32 address)
{
    uint32 result, byte_count;
    switch (opc)
    {
        case OPC_LD:
            byte_count = 4;
            break;
        case OPC_LDHS:
        case OPC_LDHU:
            byte_count = 2;
            break;
        case OPC_LDBS:
        case OPC_LDBU:
            byte_count = 1;
            break;
        default:
            byte_count = 0;
            codasip_fatal(FATAL_DEFAULT, "Default case: %d\n", opc);
            break;
    }
// Data Interface read
    result = if_ldst.read(address, byte_count);
    codasip_info(INFO_INTERFACE,

    "Load from memory: address = 0x%x (%d), value = 0x%x (%d)\n",
                 address, address, result, result);

    switch (opc)
    {
        case OPC_LDBS:
            return (int32) (int8) result;
        case OPC_LDHS:
            return (int32) (int16) result;
        case OPC_LDBU:
        case OPC_LDHU:
        case OPC_LD:
            return result;
        default:
            codasip_fatal(FATAL_DEFAULT, "Default case: %d\n", opc);
            return 0;
    }
}
// ---------------------------------------------------------------------------------------------- //
// Store function
// ---------------------------------------------------------------------------------------------- //
void store(const uint32 opc, const uint32 address, const uint32 result)
{
    uint32 byte_count;
    switch (opc)
    {
        case OPC_ST:
            byte_count = 4;
            break;
        case OPC_STH:
            byte_count = 2;
            break;
        case OPC_STB:
            byte_count = 1;
            break;
        default:
            byte_count = 0;
            codasip_fatal(FATAL_DEFAULT, "Default case: %d\n", opc);
            break;
    }
// Data Interface write
    if_ldst.write(result, address, byte_count);
    codasip_info(INFO_INTERFACE,

    "Store to memory: address = 0x%x (%d), value = 0x%x (%d)\n",
                 address, address, result, result);

}
// ---------------------------------------------------------------------------------------------- //
// Jumping
// ---------------------------------------------------------------------------------------------- //
inline void set_pc(const uint32 val)
{
    r_pc = val;
    codasip_info(INFO_PC_WRITE, "Jumping to 0x%x", val);
}

// ---------------------------------------------------------------------------------------------- //
// Compare
// ---------------------------------------------------------------------------------------------- //
uint32 cmp(const uint32 opc, const uint32 src1, const uint32 src2)
{
    uint32 result;
    switch (opc)
    {
        case OPC_EQ:
            result = src1 == src2;
            break;
        case OPC_NEQ:
            result = src1 != src2;
            break;
        case OPC_SLT:
            result = (int32) src1 < (int32) src2;
            break;
        case OPC_ULT:
            result = src1 < src2;
            break;
        case OPC_SLE:
            result = (int32) src1 <= (int32) src2;
            break;
        case OPC_ULE:
            result = src1 <= src2;
            break;
        default:
            result = 0;
            codasip_fatal(FATAL_DEFAULT, "Default case: %d\n", opc);
            break;
    }
    return result;
}
