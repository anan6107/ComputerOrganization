#include "utils.hcodal"
#include "config.hcodal"
#include "opcodes.hcodal"

// -------------------------------------------------------------------------------------------------
// Register operand element
// -------------------------------------------------------------------------------------------------
DEF_GPR(0)
DEF_GPR(1)
DEF_GPR(2)
DEF_GPR(3)
DEF_GPR(4)
DEF_GPR(5)
DEF_GPR(6)
DEF_GPR(7)
DEF_GPR(8)
DEF_GPR(9)
DEF_GPR(10)
DEF_GPR(11)
DEF_GPR(12)
DEF_GPR(13)
DEF_GPR(14)
DEF_GPR(15)
DEF_GPR(16)
DEF_GPR(17)
DEF_GPR(18)
DEF_GPR(19)
DEF_GPR(20)
DEF_GPR(21)
DEF_GPR(22)
DEF_GPR(23)
DEF_GPR(24)
DEF_GPR(25)
DEF_GPR(26)
DEF_GPR(27)
DEF_GPR(28)
DEF_GPR(29)
DEF_GPR(30)
DEF_GPR(31)
// Register class generalizes all register operands.
set gpr_all: register_class(rf_gpr);
set gpr_all = gpr_0,
              gpr_1,
              gpr_2,
              gpr_3,
              gpr_4,
              gpr_5,
              gpr_6,
              gpr_7,
              gpr_8,
              gpr_9,
              gpr_10,
              gpr_11,
              gpr_12,
              gpr_13,
              gpr_14,
              gpr_15,
              gpr_16,
              gpr_17,
              gpr_18,
              gpr_19,
              gpr_20,
              gpr_21,
              gpr_22,
              gpr_23,
              gpr_24,
              gpr_25,
              gpr_26,
              gpr_27,
              gpr_28,
              gpr_29,
              gpr_30,
              gpr_31;

element simm19
{
    signed attribute bit[IMM19_W] val;
    assembler { val };
    binary { val };
    return { val };
};

element simm14
{
    signed attribute bit[IMM14_W] val;
    assembler { val };
    binary { val };
    return { val };
};

element abs_addr24
{
    unsigned attribute bit[IMM24_W] val { label = true; };
    assembler { val };
    binary { val };
    return { val };
};

element rel_addr14
{
    signed attribute bit[IMM14_W] val
    {
        label = true;
        // A signed value is read by the assembler, the program counter value is subtracted
        // and the result is stored in the binary coding.
        encoding = val - current_address;
        decoding = val + current_address;
    };
    assembler { val };
    binary { val };
    return { val };
};

